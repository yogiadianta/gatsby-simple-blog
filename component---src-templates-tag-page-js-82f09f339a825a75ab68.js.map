{"version":3,"sources":["webpack:///./src/templates/tag-page.js","webpack:///./src/components/PostAbbrev/PostAbbrev.js","webpack:///./src/components/PostAbbrev/index.js"],"names":["TagPageTemplate","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","siteTitle","site","siteMetadata","title","useLang","lang","homeLink","tagHeader","formatMessage","breadcrumbs","text","url","description","map","node","frontmatter","fields","slug","key","base","date","timeToRead","style","marginTop","pageQuery","PostAbbrev","excerptPart","tagsPart","excerpt","tags","dangerouslySetInnerHTML","__html","TagList","margin","baseUrl","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","rel","formatDate","formatReadingTime","defaultProps"],"mappings":"0FAAA,wHAgFeA,UAlES,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpCC,EAAQH,EAARG,IADmD,EAE7BF,EAAKG,kBAA3BC,EAFmD,EAEnDA,MAAOC,EAF4C,EAE5CA,WACTC,EAAYN,EAAKO,KAAKC,aAAaC,MAHkB,EAKhCC,cAAnBC,EALmD,EAKnDA,KAAMC,EAL6C,EAK7CA,SAERC,EAAYC,YAAc,cAAeT,EAAYH,GAE3D,OACE,kBAAC,IAAD,CACED,SAAUA,EACVQ,MAAOH,EACPS,YAAa,CAAC,CAAEC,KAAMF,YAAc,SAAUG,IAAQL,EAAL,QAAuB,CAAEI,KAAMd,KAEhF,kBAAC,IAAD,CAAKO,MAAOI,EAAWK,YAAaL,IACpC,4BAAKA,GACL,8BACGT,EAAMe,IAAI,YAAe,IAAZC,EAAW,EAAXA,KACNX,EAAQW,EAAKC,YAAYZ,OAASW,EAAKE,OAAOC,KACpD,OACE,kBAAC,IAAD,CACEC,IAAKJ,EAAKE,OAAOC,KACjBE,KAAMb,EACND,KAAMA,EACNY,KAAMH,EAAKE,OAAOC,KAClBG,KAAMN,EAAKC,YAAYK,KACvBC,WAAYP,EAAKO,WACjBlB,MAAOA,OAKf,yBAAKmB,MAAO,CAAEC,UAAW,MACzB,+BACE,kBAAC,IAAD,SAiCD,IAAMC,EAAS,c,gGCvEtB,SAASC,EAAT,GAA6E,IACvEC,EAWAC,EAZgBV,EAAsD,EAAtDA,KAAMd,EAAgD,EAAhDA,MAAOiB,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYO,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,KAAMV,EAAQ,EAARA,KAmBlE,OAjBIS,IACFF,EACE,uBACEI,wBAAyB,CACvBC,OAAQH,MAOZC,IACFF,EACE,kBAACK,EAAA,EAAD,CAASV,MAAO,CAAEW,OAAQ,4BAA8BJ,KAAMA,EAAMK,QAAYf,EAAL,UAK7E,iCACE,gCACE,wBACEG,MAAO,CACLa,WAAY,yBACZC,SAAUC,YAAO,GACjBC,aAAcD,YAAO,OAGvB,kBAAC,IAAD,CAAMf,MAAO,CAAEiB,UAAW,QAAUC,GAAIvB,EAAMwB,IAAI,YAC/CtC,IAGJwB,EACD,+BAAWe,YAAWtB,GAAtB,MAAiCuB,4BAAkBtB,IAClDK,IAgBTD,EAAWmB,aAAe,CACxBzC,MAAO,KACPyB,QAAS,KACTC,KAAM,KACNV,KAAM,IAGOM,QCrEf","file":"component---src-templates-tag-page-js-82f09f339a825a75ab68.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { graphql } from 'gatsby';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport Bio from 'components/Bio';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nconst TagPageTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n\n  const { lang, homeLink } = useLang();\n\n  const tagHeader = formatMessage('tfTagHeader', totalCount, tag);\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      breadcrumbs={[{ text: formatMessage('tTags'), url: `${homeLink}tags` }, { text: tag }]}\n    >\n      <SEO title={tagHeader} description={tagHeader} />\n      <h1>{tagHeader}</h1>\n      <main>\n        {edges.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return (\n            <PostAbbrev\n              key={node.fields.slug}\n              base={homeLink}\n              lang={lang}\n              slug={node.fields.slug}\n              date={node.frontmatter.date}\n              timeToRead={node.timeToRead}\n              title={title}\n            />\n          );\n        })}\n      </main>\n      <div style={{ marginTop: 50 }} />\n      <aside>\n        <Bio />\n      </aside>\n    </Layout>\n  );\n};\n\nTagPageTemplate.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n              langKey: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default TagPageTemplate;\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String, $langKey: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } }, fields: { langKey: { eq: $langKey } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","export { default } from './PostAbbrev';\n"],"sourceRoot":""}