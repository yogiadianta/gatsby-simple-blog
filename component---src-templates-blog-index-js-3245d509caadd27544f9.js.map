{"version":3,"sources":["webpack:///./src/templates/blog-index.js","webpack:///./src/components/PostAbbrev/PostAbbrev.js","webpack:///./src/components/PostAbbrev/index.js"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","useLang","lang","homeLink","formatMessage","keywords","totalCount","map","node","frontmatter","fields","slug","base","key","date","timeToRead","excerpt","description","tags","defaultProps","pageQuery","PostAbbrev","excerptPart","tagsPart","dangerouslySetInnerHTML","__html","TagList","style","margin","baseUrl","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","rel","formatDate","formatReadingTime"],"mappings":"0FAAA,wHAWA,SAASA,EAAT,GAAwC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAFA,EAIVC,cAAnBC,EAJ6B,EAI7BA,KAAMC,EAJuB,EAIvBA,SAEd,OACE,kBAAC,IAAD,CAAQV,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAOO,YAAc,aAAcC,SAAUD,YAAc,mBAChE,+BACE,kBAAC,IAAD,OAEF,4BAAKA,YAAc,kBAAmBZ,EAAKO,kBAAkBO,aAC5DR,EAAMS,IAAI,YAAe,IAAZC,EAAW,EAAXA,KACNX,EAAQW,EAAKC,YAAYZ,OAASW,EAAKE,OAAOC,KACpD,OACE,kBAAC,IAAD,CACET,KAAMA,EACNU,KAAMT,EACNU,IAAKL,EAAKE,OAAOC,KACjBA,KAAMH,EAAKE,OAAOC,KAClBG,KAAMN,EAAKC,YAAYK,KACvBC,WAAYP,EAAKO,WACjBlB,MAAOA,EACPmB,QAASR,EAAKC,YAAYQ,aAAeT,EAAKQ,QAC9CE,KAAMV,EAAKC,YAAYS,UAanC3B,EAAU4B,aAAe,GAEV5B,YAER,IAAM6B,EAAS,a,gGC1CtB,SAASC,EAAT,GAA6E,IACvEC,EAWAC,EAZgBZ,EAAsD,EAAtDA,KAAMd,EAAgD,EAAhDA,MAAOiB,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,QAASE,EAAc,EAAdA,KAAMN,EAAQ,EAARA,KAmBlE,OAjBII,IACFM,EACE,uBACEE,wBAAyB,CACvBC,OAAQT,MAOZE,IACFK,EACE,kBAACG,EAAA,EAAD,CAASC,MAAO,CAAEC,OAAQ,4BAA8BV,KAAMA,EAAMW,QAAYjB,EAAL,UAK7E,iCACE,gCACE,wBACEe,MAAO,CACLG,WAAY,yBACZC,SAAUC,YAAO,GACjBC,aAAcD,YAAO,OAGvB,kBAAC,IAAD,CAAML,MAAO,CAAEO,UAAW,QAAUC,GAAIxB,EAAMyB,IAAI,YAC/CvC,IAGJ0B,EACD,+BAAWc,YAAWvB,GAAtB,MAAiCwB,4BAAkBvB,IAClDO,IAgBTD,EAAWF,aAAe,CACxBtB,MAAO,KACPmB,QAAS,KACTE,KAAM,KACNN,KAAM,IAGOS,QCrEf","file":"component---src-templates-blog-index-js-3245d509caadd27544f9.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Bio from 'components/Bio';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nfunction BlogIndex({ data, location }) {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  const { lang, homeLink } = useLang();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formatMessage('tIndTitle')} keywords={formatMessage('taIndKeywords')} />\n      <aside>\n        <Bio />\n      </aside>\n      <h4>{formatMessage('tfIndCountPosts', data.allMarkdownRemark.totalCount)}</h4>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <PostAbbrev\n            lang={lang}\n            base={homeLink}\n            key={node.fields.slug}\n            slug={node.fields.slug}\n            date={node.frontmatter.date}\n            timeToRead={node.timeToRead}\n            title={title}\n            excerpt={node.frontmatter.description || node.excerpt}\n            tags={node.frontmatter.tags}\n          />\n        );\n      })}\n    </Layout>\n  );\n}\n\nBlogIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nBlogIndex.defaultProps = {};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query($langKey: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","export { default } from './PostAbbrev';\n"],"sourceRoot":""}